一天9个，也就是一小时一个。9点半上班，到12点半应该画3个，要是1点半吃饭，应该要画出4个来。下午吃完饭2点半。到3点半做运动，应该再出来一个。到6点半下班，应该再出来3个。到7点半，再画一个。剩下的一个小时做总结，或者回顾问题，或者细读局部的代码。

这其实是一个计件的工作。就像车间里的熟练工。

一个小时是不可能去读代码的，也没有时间去寻找问题并解决。这是一个画流程图的工作，不是一个debug的工作。它的侧重点，在于流程图和截图，而不是真正梳理清楚里面的业务逻辑。

这个流程图，必然是用于测试新系统的，所以，旧系统的代码，可以不需要去斟酌。旧代码已经要作废了，还管它里面的细节做什么。把流程 用户操作步骤 交互数据这些截出来，作为需求文档，交给新系统的测试人员，这就是这份工作的意义所在。所以，我的理解是不太到位的。

这是提炼需求，而不是整理业务逻辑，更不是debug。这是纯用户视角的界面跳转流程。

我好像没太弄清楚自己在做什么。当然，之前也没做过这样的工作。关于需求整理的工作。我之前都是处于逻辑层，考虑的更多的是，如何尽量实现通用的代码逻辑或架构，以兼容用户潜在的需求变动。现在这个工作是完全不一样的。

衔接旧系统与新系统的用户需求，这个工作，应该是很难省去的。但同时，旧系统没法给中国的开发测试人员。涉及到环境和测试数据，涉及到信息安全和保密制度。所以，需要有人把旧系统的需求整理出来。这个工作不重要，没有技术含量，但是，没法省略。

做这个工作，要求是，效率，准确，完整。要每天能完成一定的工作量，不要墨迹，要准确的截图，画出正确的流程图，不要出错，要涵盖所有的画面和需求分支，不要遗漏。

要站在用户视角。这件事，其实最好是用户中的熟练人员去做，真正的用户最懂用户的需求，而不应该是我这种伪用户。开发人员完全有能力做这件事，但这件事由开发人员去做是不合适的，就像开发人员不应该同时是测试人员那样。

要忠诚于旧系统，不要有自己的臆断，不要随意或不严谨，要认真仔细。要站在用户角度，而不是业务逻辑的角度。旧系统的用户操作界面，可以看作是用户需求的一个凝结与汇总。

产出的是流程图与截图，以及操作的数据，以及将每一个操作按钮都能操作出来的触发条件。后两者都体现在截图中。所以，要站在流程图和截图的角度，去倒推自己应该做的事情，上班时间每件事情的着眼点，都应当是流程图和截图。这是上班所有努力的出发点，也是归宿。当然，也是对我的工作和我的工作能力进行衡量的依据。

首先是认识。其次是，遇到问题该怎么办，以及，怎样尽快把自己需要的信息提取出来。关键词是提取。就像从大堆大堆的垃圾山中寻找需要的金粒那样，把需要的信息提取出来。那些代码，应当视为垃圾，是一种要丢弃的废弃物。找到自己需要的东西就好，不需要多看一眼，不需要停留，就像人们对垃圾的态度那样对待那些代码。用户需求在上，我在中间，代码在最下面的垃圾堆里。

遇题该怎么办呢？连不上数据库，没有对应的数据表，表里面没有数据，需要自己去数据库把数据找出来，某个界面不知道如何触发，某个按钮灰色的或隐藏了不知道该如何触发，或者很难触发出来，以及更重要的，时间有限。没法加班，不允许待到太晚。每天，需要高强度12小时。早上9点到晚上9点。节假日不可以加班，只能看到旧代码。

这些问题是我要解决的，也是他们给我工资的原因所在。这是我的工作内容。成功的解决这些问题，最终，高质量高效率的提取出流程图和截图，作为输出。

不过，问题终归也就这么几类。要有好的工具，更要有恰当的处理思路。工具辅助思路。Debug工具是一个极佳的选择，如果能得到。点点按钮就能得到sql，这是很爽的一件事情，能极大提高效率。但即使有了sql，仍然需要想办法触发按钮或潜在页面。设置断点可能有用，但不会降低问题的复杂度。

所以更重要的是思路。他俩在面对这件事情的时候，思路比我清晰的多。

日本跟中国不一样。日本是个发达国家。发达国家，还有另外一层意思，那就是勤劳。制度性优势导致的浪费减少固然是一个方面，另一个方面是，在上帝面前取得进展，却是公正公平的。他们之所以做到的更多，因为他们更勤劳，更有耐心，更努力，更开放的思路，更好的团队协作。日本的防震，以色列的沙漠农业，在外人看来满满的光鲜和惊艳，但在他们自己看来，却是满满的艰辛和不懈的努力吧。天下没有免费的午餐，他们成为发达国家，其根本的原因，恐怕正是这种持之以恒的努力与勤劳。既然选择了日本这样的发达国家，就应该像日本人像以色列人那样去努力。所以这份工作，要付出全部的热情和努力，不要犹豫，不要保留，像刚工作的小孩那样。这是一个起点，一切都要从头开始。

我下决心做，且只做的几件事。工作，是其中之一。目前，全力以赴。

XX大约一天6个。那就是1.5小时一个。这事得看小时，不能看天。9点半到12点半，上午两个。中午的时间比较弹性，除去吃饭的时间，到3点半做广播体操，应该再弄出一个来。到5点一个。到6点半一个。到8点一个。
09:30
11:00
12:30
15:30
17:00
18:30
20:00
这几个时间点是检验的时间点。领导每天看成果，我得到了这几个时间点，自己看成果。

如果遇到有问题的，要在10分钟之内决定继续尝试还是放弃。如果决定尝试，要在90分钟之内解决问题，并且画出图、找到合适的数据、做出截图。

我所遇到的问题：
（1）   遇到弹出的错误不知道什么意思。需要去代码里找对应的错误，然后从代码里看这个错误提示会在什么情况下触发。这是语言的问题。（错误的类型不会太多，再遇到的时候，截图，编号，询问，保存，记住这些错误提示表示的含义）
（2）   连接的时候，会发生各种异常。其中之一是数据库连不上，需要去尝试配置文件。更改之后一般不太可行。（遇到这类问题及时请教）
（3）   需要填上合适的数据，才能进行接下来的操作，或者才能看到完整的功能或其他界面。（一般是社员CD、坛票CD。保存几个常用的CD，在如果需要的时候，直接使用。对于没有的，需要在SQL中去快速查找，只关注SQL中对自己有用的信息，不需要关注完整的SQL的表格关联、字段含义、不需要关注代码的逻辑，这种查找不应该超过10分钟甚至5分钟。）
（4）   其他界面的触发条件。（Show方法的调用位置，只需要进行快速搜索，不需要关注细节，不需要梳理出层层的调用关系）
（5）   某些字段或功能被置灰。（尽量去猜测，猜测与代码查找相互验证，寻找触发条件）。
（6）   做完一个休息十分钟，这样可以保证接下里的一个多小时精力充沛。也就是一个需要在80分钟内完成。
（7）   画流程图也需要花费不少的时间。（清晰就好，不需要一定要求没有交叉，或者一定是直线不拐弯。事先做好一个模板，其他的都是基于这个模板，把框做的尽量小点，这样画线的时候能一下子找到衔接点。）
（8）   要有一个清晰的记录清单，这个记录清单随着在做，也随时维护和更新，最大限度避免返工。
（9）   有一个比较大的钟表放在桌上比较重要，不小心就能看到当前时间。不过这只是锦上添花的因素，主要还是自己要有时间观念，不要沉迷于那些需要解决的问题而忘了时间。
（10）  时间过得很快，15分钟几乎只是一瞬。所以很多事情，对于工作没有直接帮助也没有直接关联的那些事情，不要去做。能将就就将就。比如机器环境。比如显示器的亮度感觉不太合适。比如某个单词不知道什么意思。90分钟做一个的要求就是，这些所有的只要能将就的因素，一律将就。
（11）  记住windows的快捷键是必要的。既然是使用windows的工作环境。虽然有点low，但这是必要的，可以提高效率。
（12）  2019/1/7还是慢，即使思路已经有所改变。第一个一直耗到下午四点，然后第二个结束就晚上8点了。第一个主要是遇到了问题，不是大问题，是二级窗口的数据出不来。就卡住了。第二个主要是画图画的慢。感觉问题还挺大的，做不到90分钟一个。第一个这种情况，应当找出问题来就行，比如二级窗口没有数据，事实上库里就是没有数据的，那么把这个情况找出来就好。要接受问题和缺陷，但要弄清晰。
（13）  画图也有诸多需要改进的地方，其中，也许准备好模板，只是填空会好些。
